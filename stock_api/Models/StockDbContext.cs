// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace stock_api.Models;

public partial class StockDbContext : DbContext
{
    public StockDbContext(DbContextOptions<StockDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AcceptanceItem> AcceptanceItems { get; set; }

    public virtual DbSet<AdjustMainItemListView> AdjustMainItemListViews { get; set; }

    public virtual DbSet<ApplyNewProductFlow> ApplyNewProductFlows { get; set; }

    public virtual DbSet<ApplyNewProductMain> ApplyNewProductMains { get; set; }

    public virtual DbSet<ApplyProductFlowLog> ApplyProductFlowLogs { get; set; }

    public virtual DbSet<ApplyProductFlowSetting> ApplyProductFlowSettings { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompanyUnit> CompanyUnits { get; set; }

    public virtual DbSet<FileDetailInfo> FileDetailInfos { get; set; }

    public virtual DbSet<InStockItemRecord> InStockItemRecords { get; set; }

    public virtual DbSet<InventoryAdjustItem> InventoryAdjustItems { get; set; }

    public virtual DbSet<InventoryAdjustMain> InventoryAdjustMains { get; set; }

    public virtual DbSet<LastMonthUsage> LastMonthUsages { get; set; }

    public virtual DbSet<LastYearUsage> LastYearUsages { get; set; }

    public virtual DbSet<LastYearUsageByMonth> LastYearUsageByMonths { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<OutStockRecord> OutStockRecords { get; set; }

    public virtual DbSet<OutstockRelatetoInstock> OutstockRelatetoInstocks { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<PurchaseAcceptanceItemsView> PurchaseAcceptanceItemsViews { get; set; }

    public virtual DbSet<PurchaseFlow> PurchaseFlows { get; set; }

    public virtual DbSet<PurchaseFlowLog> PurchaseFlowLogs { get; set; }

    public virtual DbSet<PurchaseFlowSetting> PurchaseFlowSettings { get; set; }

    public virtual DbSet<PurchaseItemListView> PurchaseItemListViews { get; set; }

    public virtual DbSet<PurchaseMainSheet> PurchaseMainSheets { get; set; }

    public virtual DbSet<PurchaseSubItem> PurchaseSubItems { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<SupplierTraceLog> SupplierTraceLogs { get; set; }

    public virtual DbSet<TempInStockItemRecord> TempInStockItemRecords { get; set; }

    public virtual DbSet<TempOutStockRecord> TempOutStockRecords { get; set; }

    public virtual DbSet<WarehouseAuthlayer> WarehouseAuthlayers { get; set; }

    public virtual DbSet<WarehouseGroup> WarehouseGroups { get; set; }

    public virtual DbSet<WarehouseMember> WarehouseMembers { get; set; }

    public virtual DbSet<WarehouseProduct> WarehouseProducts { get; set; }

    public virtual DbSet<WarehouseProductCommon> WarehouseProductCommons { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<AcceptanceItem>(entity =>
        {
            entity.HasKey(e => e.AcceptId).HasName("PRIMARY");

            entity.ToTable("acceptance_item", tb => tb.HasComment("各採購項目驗收紀錄"));

            entity.Property(e => e.AcceptQuantity).HasComment("驗收接受數量，不可大於 OrderQuantity");
            entity.Property(e => e.AcceptUserId).HasComment("驗收允收者的UserID");
            entity.Property(e => e.Comment).HasComment("初驗驗收填寫相關原因");
            entity.Property(e => e.CompId).HasComment("所屬組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentTotalQuantity).HasComment("驗收入庫後，當下該品項的總庫存數量");
            entity.Property(e => e.ExpirationDate).HasComment("保存期限");
            entity.Property(e => e.InStockStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("入庫狀態\nNONE,PART,DONE");
            entity.Property(e => e.ItemId).HasComment("對應 PurchaseSubItem 的 PK");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.LotNumberBatchSeq).ValueGeneratedOnAdd();
            entity.Property(e => e.OrderQuantity).HasComment("訂購數量，對應 PurchaseSubItem 的 Quantity");
            entity.Property(e => e.PackagingStatus).HasComment("外觀包裝\nNORMAL : 完成\nBREAK : 破損");
            entity.Property(e => e.ProductId).HasComment("品項PK");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.PurchaseMainId).HasComment("PurchaseMainSheet 的 PK");
            entity.Property(e => e.QcComment).HasComment("二次驗收填寫相關原因");
            entity.Property(e => e.QcStatus).HasComment("驗收測試品管結果\nPASS : 通過\nFAIL : 不通過\nNONEED : 不需側\nOTHER : 其他");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<AdjustMainItemListView>(entity =>
        {
            entity.ToView("adjust_main_item_list_view");

            entity.Property(e => e.AdjustCompId).HasComment("如果單據屬於調撥單，則填入被調撥的公司ID。\n非調撥單，保持空值");
            entity.Property(e => e.CompId).HasComment("該單據所屬的公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentStatus).HasComment("目前狀態\nAPPLY : 申請中\nAGREE : 同意\nREJECT : 拒絕\nCLOSE : 結案");
            entity.Property(e => e.ItemCreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.ItemUpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.Type).HasComment("SHIFT : 調撥\nADJUST : 盤點調整\nRETURN : 退庫\nRETURN_OUT : 退貨");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("此單據的建立者");
        });

        modelBuilder.Entity<ApplyNewProductFlow>(entity =>
        {
            entity.HasKey(e => e.FlowId).HasName("PRIMARY");

            entity.ToTable("apply_new_product_flow", tb => tb.HasComment("當使用者提出一筆申請品項時，ApplyNewProductFlow 就會新增一筆資料，且每一次變動就會在此表格寫入一筆資料留下申請的審核紀錄。"));

            entity.Property(e => e.Answer).HasComment("回覆結果\\nAGREE : 同意\\nREJECT : 不同意\\n空白 : 未回應");
            entity.Property(e => e.ApplyId).HasComment("對應 ApplyNewProductMain PK");
            entity.Property(e => e.CompId).HasComment("申請者的來源組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.ReviewCompId).HasComment("審核此單據的組織ID");
            entity.Property(e => e.ReviewGroupId).HasComment("負責簽核的組別");
            entity.Property(e => e.ReviewUserId).HasComment("審核此單據的UserID");
            entity.Property(e => e.ReviewUserName).HasComment("審核此單據的UserName");
            entity.Property(e => e.Status).HasComment("當下該單據狀態");
            entity.Property(e => e.SubmitAt).HasComment("送出時間");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<ApplyNewProductMain>(entity =>
        {
            entity.HasKey(e => e.ApplyId).HasName("PRIMARY");

            entity.ToTable("apply_new_product_main", tb => tb.HasComment("當使用者提出一筆申請品項時，ApplyNewProductMain 就會新增一筆資料。"));

            entity.Property(e => e.ApplyProductName).HasComment("品名");
            entity.Property(e => e.ApplyProductSpec).HasComment("規格");
            entity.Property(e => e.ApplyQuantity)
                .HasDefaultValueSql("'0'")
                .HasComment("申請數量");
            entity.Property(e => e.ApplyReason).HasComment("申請原因");
            entity.Property(e => e.ApplyRemarks).HasComment("申請備註內容");
            entity.Property(e => e.CompId).HasComment("申請者的來源組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentStatus)
                .HasDefaultValueSql("'APPLY'")
                .HasComment("目前狀態\\\\\\\\nAPPLY : 申請中\\\\\\\\nAGREE : 同意\\\\\\\\nREJECT : 拒絕\\\\\\\\nCLOSE : 結案\\\\\\\\DONE:申請完成");
            entity.Property(e => e.ProductGroupId).HasComment("品項組別");
            entity.Property(e => e.ProductGroupName).HasComment("品項組別名");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("申請者的UserID\n對應 Member Table.");
        });

        modelBuilder.Entity<ApplyProductFlowLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PRIMARY");

            entity.ToTable("apply_product_flow_log", tb => tb.HasComment("*假設今天有人員異動，造成申請單據的審核流程卡住，系統會提供一個畫面給該院區管理者，管理者進入後得強制進行審核。"));

            entity.Property(e => e.Action).HasComment("動作\nNEXT : 下一步\nPREV : 上一步\nCLOSE : 結案");
            entity.Property(e => e.ApplyId).HasComment("對應 ApplyNewProductMain PK");
            entity.Property(e => e.CompId).HasComment("申請者的來源組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.Remarks).HasComment("備註內容");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("操作者的UserID");
            entity.Property(e => e.UserName).HasComment("操作者名稱");
        });

        modelBuilder.Entity<ApplyProductFlowSetting>(entity =>
        {
            entity.HasKey(e => new { e.SettingId, e.CompId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("apply_product_flow_setting", tb => tb.HasComment("系統先行設定申請的審核流程"));

            entity.Property(e => e.CompId).HasComment("所屬組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.FlowName).HasComment("審核流程顯示名稱");
            entity.Property(e => e.ReviewGroupId).HasComment("負責簽核的組別");
            entity.Property(e => e.ReviewUserId).HasComment("此審核流程的審核者");
            entity.Property(e => e.Sequence).HasComment("順序");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompId).HasName("PRIMARY");

            entity.ToTable("company", tb => tb.HasComment("Company 規範目前庫存系統內的組織，透過 Type 欄位來區分組織是屬於一般組織，或是系統擁有者（廠商），廠商可以具有權限查閱所有機構的庫存資料。"));

            entity.Property(e => e.CompId).HasComment("PK, 公司ID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasComment("建立時間");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("'1'")
                .HasComment("是否激活狀態");
            entity.Property(e => e.Name).HasComment("顯示名稱");
            entity.Property(e => e.Type).HasComment("類型\nOWNER : 系統擁有者（廠商）\nORGANIZATION : 機構（醫院）");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<CompanyUnit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("company_unit", tb => tb.HasComment("醫院院區關係資料"));

            entity.Property(e => e.CompId).HasComment("組織ID");
            entity.Property(e => e.CompName).HasComment("組織名稱");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UnitId).HasComment("如果是同一單位，就會是一樣的 UnitID");
            entity.Property(e => e.UnitName).HasComment("單位名稱");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<FileDetailInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("file_detail_info", tb => tb.HasComment("上傳檔案"));

            entity.Property(e => e.CompId).HasComment("member.UserId");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CreatorId).HasComment("member.UserId");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<InStockItemRecord>(entity =>
        {
            entity.HasKey(e => e.InStockId).HasName("PRIMARY");

            entity.ToTable("in_stock_item_record", tb => tb.HasComment("每一筆要更新庫存紀錄（增加）的操作，都需要寫入一筆記錄在 InStockRecord，包含採購驗收、調撥、盤點（盤盈）、退庫，類型寫在 Type 欄位。"));

            entity.Property(e => e.AdjustItemId).HasComment("若此筆入庫是由盤盈而來才有值");
            entity.Property(e => e.AfterQuantity).HasComment("入庫後數量");
            entity.Property(e => e.BarCodeNumber).HasComment("用來產生條碼的數字，PadLeft : 7個0\nExample : 0000001");
            entity.Property(e => e.Comment).HasComment("初驗驗收填寫相關原因");
            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.ExpirationDate).HasComment("保存期限");
            entity.Property(e => e.InStockQuantity).HasComment("此次入庫數量");
            entity.Property(e => e.IsNeedQc).HasDefaultValueSql("'0'");
            entity.Property(e => e.ItemId).HasComment("對應 PurchaseSubItem 的 PK\n非採購入庫，NULL");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.OriginalQuantity).HasComment("現有庫存量");
            entity.Property(e => e.OutStockQuantity).HasDefaultValueSql("'0'");
            entity.Property(e => e.OutStockStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("出庫的狀態\\\\nNONE:都還沒出,PART:出部分:ALL:出完全部");
            entity.Property(e => e.PackagingStatus).HasComment("外觀包裝\\nNORMAL : 完成\\nBREAK : 破損");
            entity.Property(e => e.ProductId).HasComment("品項PK");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.QcComment).HasComment("二次驗收填寫相關原因");
            entity.Property(e => e.QcTestStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE,FAIL,PASS");
            entity.Property(e => e.QcType)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE,LOT_NUMBER,LOT_NUMBER_BATCH");
            entity.Property(e => e.Type).HasComment("類型\nPURCHASE : 來源是採購\nSHIFT : 調撥\nADJUST : 調整（盤盈）\nRETURN : 退庫");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("執行入庫人員的UserID");
            entity.Property(e => e.UserName).HasComment("執行入庫人員的UserName");
        });

        modelBuilder.Entity<InventoryAdjustItem>(entity =>
        {
            entity.HasKey(e => e.AdjustItemId).HasName("PRIMARY");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<InventoryAdjustMain>(entity =>
        {
            entity.HasKey(e => e.MainId).HasName("PRIMARY");

            entity.ToTable("inventory_adjust_main", tb => tb.HasComment("盤點及調撥處理主要單據\n每一筆要更新庫存紀錄（增加）的操作，都需要寫入一筆記錄在 InStockRecord，包含採購驗收、調撥、盤點（盤盈）、退庫，類型寫在 Type 欄位。"));

            entity.Property(e => e.AdjustCompId).HasComment("如果單據屬於調撥單，則填入被調撥的公司ID。\n非調撥單，保持空值");
            entity.Property(e => e.CompId).HasComment("該單據所屬的公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentStatus).HasComment("目前狀態\nAPPLY : 申請中\nAGREE : 同意\nREJECT : 拒絕\nCLOSE : 結案");
            entity.Property(e => e.Type).HasComment("SHIFT : 調撥\nADJUST : 盤點調整\nRETURN : 退庫\nRETURN_OUT : 退貨");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("此單據的建立者");
        });

        modelBuilder.Entity<LastMonthUsage>(entity =>
        {
            entity.ToView("last_month_usage");

            entity.Property(e => e.ProductId).HasComment("品項PK");
        });

        modelBuilder.Entity<LastYearUsage>(entity =>
        {
            entity.ToView("last_year_usage");

            entity.Property(e => e.ProductId).HasComment("品項PK");
        });

        modelBuilder.Entity<LastYearUsageByMonth>(entity =>
        {
            entity.ToView("last_year_usage_by_month");

            entity.Property(e => e.ProductId).HasComment("品項PK");
        });

        modelBuilder.Entity<Manufacturer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("manufacturer", tb => tb.HasComment("Manufacturer 這一個表格主要是用來記錄「庫存品項的製造商」，建立此清單後，當使用者在新增庫存品項時就可直接自動下拉選擇。"));

            entity.Property(e => e.Code).HasComment("製造商編號");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("'1'")
                .HasComment("是否激活狀態");
            entity.Property(e => e.Name).HasComment("製造商名稱");
            entity.Property(e => e.Remark).HasComment("備註訊息");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<OutStockRecord>(entity =>
        {
            entity.HasKey(e => e.OutStockId).HasName("PRIMARY");

            entity.ToTable("out_stock_record", tb => tb.HasComment("每一筆要更新庫存紀錄（增加）的操作，都需要寫入一筆記錄在 InStockRecord，包含採購驗收、調撥、盤點（盤盈）、退庫，類型寫在 Type 欄位。"));

            entity.Property(e => e.AbnormalReason).HasComment("異常原因，如果沒有異常則保持空");
            entity.Property(e => e.AdjustItemId).HasComment("若此筆出庫是由盤虧而來才有值");
            entity.Property(e => e.AfterQuantity).HasComment("入庫後數量");
            entity.Property(e => e.ApplyQuantity).HasComment("出庫數量");
            entity.Property(e => e.BarCodeNumber).HasComment("用來產生條碼的數字，PadLeft : 7個0\nExample : 0000001");
            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.ExpirationDate).HasComment("保存期限");
            entity.Property(e => e.IsAbnormal).HasComment("是否為出庫異常\n0為false,1為true");
            entity.Property(e => e.IsReturned)
                .HasDefaultValueSql("'0'")
                .HasComment("是否已退庫");
            entity.Property(e => e.ItemId).HasComment("對應 PurchaseSubItem 的 PK\n非採購入庫，NULL");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.OriginalQuantity).HasComment("現有庫存量");
            entity.Property(e => e.ProductId).HasComment("品項PK");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.Type).HasComment("類型\nPURCHASE_OUT : 來源是採購\nSHIFT_OUT : 被調撥\nADJUST_OUT : 調整（盤虧）\nRETURN_OUT : 退貨");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("執行出庫人員的UserID");
            entity.Property(e => e.UserName).HasComment("執行出庫人員的UserName");
        });

        modelBuilder.Entity<OutstockRelatetoInstock>(entity =>
        {
            entity.HasKey(e => e.OutStockId).HasName("PRIMARY");

            entity.ToTable("outstock_relateto_instock", tb => tb.HasComment("出庫對應入庫,可能是多對多"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<PurchaseAcceptanceItemsView>(entity =>
        {
            entity.ToView("purchase_acceptance_items_view");

            entity.Property(e => e.AcceptCreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.AcceptQuantity).HasComment("驗收接受數量，不可大於 OrderQuantity");
            entity.Property(e => e.AcceptUpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.AcceptUserId).HasComment("驗收允收者的UserID");
            entity.Property(e => e.ApplyDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasComment("申請日期");
            entity.Property(e => e.Comment).HasComment("初驗驗收填寫相關原因");
            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentStatus).HasComment("目前狀態\nAPPLY : 申請中\nAGREE : 同意\nREJECT : 拒絕\nCLOSE : 結案");
            entity.Property(e => e.CurrentTotalQuantity).HasComment("驗收入庫後，當下該品項的總庫存數量");
            entity.Property(e => e.DemandDate).HasComment("需求日期");
            entity.Property(e => e.ExpirationDate).HasComment("保存期限");
            entity.Property(e => e.GroupIds).HasComment("設定此單據所屬的組別，參考 Warehouse_Group");
            entity.Property(e => e.InStockStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("入庫狀態\nNONE,PART,DONE");
            entity.Property(e => e.ItemId).HasComment("對應 PurchaseSubItem 的 PK");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.OrderQuantity).HasComment("訂購數量，對應 PurchaseSubItem 的 Quantity");
            entity.Property(e => e.PackagingStatus).HasComment("外觀包裝\nNORMAL : 完成\nBREAK : 破損");
            entity.Property(e => e.ProductId).HasComment("品項PK");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.QcComment).HasComment("二次驗收填寫相關原因");
            entity.Property(e => e.QcStatus).HasComment("驗收測試品管結果\nPASS : 通過\nFAIL : 不通過\nNONEED : 不需側\nOTHER : 其他");
            entity.Property(e => e.ReceiveStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("送單到金萬林後，目前狀態\\\\nNONE : 系統處理中\\\\nDELIVERED : 得標廠商處理中\\\\nIN_ACCEPTANCE_CHECK :單位 驗收中\\\\nPART_ACCEPT : 部分驗收入庫\\\\nALL_ACCEPT : 全部驗收入庫");
            entity.Property(e => e.Remarks).HasComment("備註內容");
            entity.Property(e => e.SplitPrcoess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE(所有sub_item都尚未經過OWNER拆單),PART(部分sub_item經過OWNER拆單),DONE(所有sub_item經過OWNER拆單)");
            entity.Property(e => e.Type).HasComment("採購單類型\nGENERAL : 一般訂單\nURGENT : 緊急訂單");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("此採購單據的建立者");
        });

        modelBuilder.Entity<PurchaseFlow>(entity =>
        {
            entity.HasKey(e => e.FlowId).HasName("PRIMARY");

            entity.ToTable("purchase_flow", tb => tb.HasComment("品項的採購單據流程審核紀錄"));

            entity.Property(e => e.Answer).HasComment("回覆結果\nAGREE : 同意\nREJECT : 不同意\n空白 : 未回應");
            entity.Property(e => e.CompId).HasComment("所屬組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.PurchaseMainId).HasComment("PurchaseMainSheet PK");
            entity.Property(e => e.ReadAt).HasComment("讀取時間");
            entity.Property(e => e.Reason).HasComment("流程備註內容");
            entity.Property(e => e.Sequence).HasComment("流程順序");
            entity.Property(e => e.Status).HasComment("當下該單據狀態WAIT,AGREE,REJECT");
            entity.Property(e => e.SubmitAt).HasComment("送出時間");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.VerifyCompId).HasComment("審核人員所屬公司ID");
            entity.Property(e => e.VerifyUserId).HasComment("審核人員的UserID");
            entity.Property(e => e.VerifyUserName).HasComment("審核人員的UserName");
        });

        modelBuilder.Entity<PurchaseFlowLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PRIMARY");

            entity.ToTable("purchase_flow_log", tb => tb.HasComment("*假設今天有人員異動，造成採購單據的審核流程卡住，系統會提供一個畫面給該院區管理者，管理者進入後得強制進行審核。"));

            entity.Property(e => e.Action).HasComment("動作\nNEXT : 下一步\nPREV : 上一步\nCLOSE : 結案");
            entity.Property(e => e.CompId).HasComment("所屬組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.PurchaseMainId).HasComment("PurchaseMainSheet PK");
            entity.Property(e => e.Remarks).HasComment("備註內容");
            entity.Property(e => e.Sequence).HasComment("流程順序");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("紀錄操作者的UserID");
            entity.Property(e => e.UserName).HasComment("紀錄操作者的UserName");
        });

        modelBuilder.Entity<PurchaseFlowSetting>(entity =>
        {
            entity.HasKey(e => e.FlowId).HasName("PRIMARY");

            entity.ToTable("purchase_flow_setting", tb => tb.HasComment("系統先行設定採購的審核流程"));

            entity.Property(e => e.CompId).HasComment("所屬組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.FlowName).HasComment("流程名稱");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Sequence).HasComment("流程順序");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("此審核流程的審核者");
        });

        modelBuilder.Entity<PurchaseItemListView>(entity =>
        {
            entity.ToView("purchase_item_list_view");

            entity.Property(e => e.ApplyDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasComment("申請日期");
            entity.Property(e => e.ArrangeSupplierId).HasComment("這部分是由得標廠商（金萬林），在收到這張單子的品項後，可以指派該品項的供應商，再進行拆單");
            entity.Property(e => e.ArrangeSupplierName).HasComment("這部分是由得標廠商（金萬林），在收到這張單子的品項後，可以指派該品項的供應商，再進行拆單");
            entity.Property(e => e.Comment).HasComment("品項備註內容");
            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentInStockQuantity).HasComment("採購單項目在建立當下的庫存數量");
            entity.Property(e => e.CurrentStatus).HasComment("目前狀態\nAPPLY : 申請中\nAGREE : 同意\nREJECT : 拒絕\nCLOSE : 結案");
            entity.Property(e => e.DemandDate).HasComment("需求日期");
            entity.Property(e => e.GroupIds).HasComment("設定此單據所屬的組別，參考 Warehouse_Group");
            entity.Property(e => e.ItemGroupIds).HasComment("品項可以設定組別ID\\n在醫院端可以依照組別拆單顯示");
            entity.Property(e => e.ItemReceiveStatus).HasComment("送單到金萬林後，目前狀態\\\\\\\\nNONE : 尚未收到結果\\\\\\\\nPART : 部分驗收入庫\\\\\\\\nDONE : 全部驗收入庫\\\\\\\\nCLOSE:金萬林不同意拆單後的採購項目\\n");
            entity.Property(e => e.MainSplitPrcoess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE(所有sub_item都尚未經過OWNER拆單),PART(部分sub_item經過OWNER拆單),DONE(所有sub_item經過OWNER拆單)");
            entity.Property(e => e.OwnerProcess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE,NOT_AGREE,PART_AGREE,AGREE");
            entity.Property(e => e.ProductCategory).HasComment("品項的 ProductCategory, 用來醫院拆單用");
            entity.Property(e => e.ProductId).HasComment("品項的PK，\n參考 Product Table");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.Quantity).HasComment("數量");
            entity.Property(e => e.ReceiveQuantity).HasComment("已收到的數量");
            entity.Property(e => e.ReceiveStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("送單到金萬林後，目前狀態\\\\nNONE : 系統處理中\\\\nDELIVERED : 得標廠商處理中\\\\nIN_ACCEPTANCE_CHECK :單位 驗收中\\\\nPART_ACCEPT : 部分驗收入庫\\\\nALL_ACCEPT : 全部驗收入庫");
            entity.Property(e => e.Remarks).HasComment("備註內容");
            entity.Property(e => e.SubOwnerProcess).HasDefaultValueSql("'NONE'");
            entity.Property(e => e.SubSplitProcess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE(表示OWNER尚未拆單過), DONE(表示OWNER已經拆單過)\n");
            entity.Property(e => e.Type).HasComment("採購單類型\nGENERAL : 一般訂單\nURGENT : 緊急訂單");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("此採購單據的建立者");
            entity.Property(e => e.WithCompId).HasComment("Owner從拆單建立就會帶這個參數,表示從WithCompId的採購單拆單出來的");
            entity.Property(e => e.WithItemId).HasComment("Owner從拆單建立就會帶這個參數,對應對WithCompId的purchase_sub_item.ItemId");
            entity.Property(e => e.WithPurchaseMainId).HasComment("Owner從拆單建立就會帶這個參數,對應對WithCompId的採購單purchase_main_sheet.PurchaseMainId");
        });

        modelBuilder.Entity<PurchaseMainSheet>(entity =>
        {
            entity.HasKey(e => e.PurchaseMainId).HasName("PRIMARY");

            entity.ToTable("purchase_main_sheet", tb => tb.HasComment("品項的採購單據主體"));

            entity.Property(e => e.ApplyDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasComment("申請日期");
            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentStatus).HasComment("目前狀態\nAPPLY : 申請中\nAGREE : 同意\nREJECT : 拒絕\nCLOSE : 結案");
            entity.Property(e => e.DemandDate).HasComment("需求日期");
            entity.Property(e => e.GroupIds).HasComment("設定此單據所屬的組別，參考 Warehouse_Group");
            entity.Property(e => e.OwnerProcess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE,NOT_AGREE,PART_AGREE,AGREE");
            entity.Property(e => e.ReceiveStatus)
                .HasDefaultValueSql("'NONE'")
                .HasComment("送單到金萬林後，目前狀態\\\\nNONE : 系統處理中\\\\nDELIVERED : 得標廠商處理中\\\\nIN_ACCEPTANCE_CHECK :單位 驗收中\\\\nPART_ACCEPT : 部分驗收入庫\\\\nALL_ACCEPT : 全部驗收入庫");
            entity.Property(e => e.Remarks).HasComment("備註內容");
            entity.Property(e => e.SplitPrcoess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE(所有sub_item都尚未經過OWNER拆單),PART(部分sub_item經過OWNER拆單),DONE(所有sub_item經過OWNER拆單)");
            entity.Property(e => e.Type).HasComment("採購單類型\nGENERAL : 一般訂單\nURGENT : 緊急訂單");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("此採購單據的建立者");
        });

        modelBuilder.Entity<PurchaseSubItem>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PRIMARY");

            entity.ToTable("purchase_sub_item", tb => tb.HasComment("品項的採購單據列表"));

            entity.Property(e => e.ArrangeSupplierId).HasComment("這部分是由得標廠商（金萬林），在收到這張單子的品項後，可以指派該品項的供應商，再進行拆單");
            entity.Property(e => e.ArrangeSupplierName).HasComment("這部分是由得標廠商（金萬林），在收到這張單子的品項後，可以指派該品項的供應商，再進行拆單");
            entity.Property(e => e.Comment).HasComment("品項備註內容");
            entity.Property(e => e.CompId).HasComment("所屬組織ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.CurrentInStockQuantity).HasComment("採購單項目在建立當下的庫存數量");
            entity.Property(e => e.GroupIds).HasComment("品項可以設定組別ID\\n在醫院端可以依照組別拆單顯示");
            entity.Property(e => e.InStockQuantity).HasDefaultValueSql("'0'");
            entity.Property(e => e.OwnerProcess).HasDefaultValueSql("'NONE'");
            entity.Property(e => e.ProductCategory).HasComment("品項的 ProductCategory, 用來醫院拆單用");
            entity.Property(e => e.ProductId).HasComment("品項的PK，\n參考 Product Table");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.PurchaseMainId).HasComment("PurchaseMainSheet PK");
            entity.Property(e => e.Quantity).HasComment("數量");
            entity.Property(e => e.ReceiveQuantity).HasComment("已收到的數量");
            entity.Property(e => e.ReceiveStatus).HasComment("送單到金萬林後，目前狀態\\\\\\\\nNONE : 尚未收到結果\\\\\\\\nPART : 部分驗收入庫\\\\\\\\nDONE : 全部驗收入庫\\\\\\\\nCLOSE:金萬林不同意拆單後的採購項目\\n");
            entity.Property(e => e.SplitProcess)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE(表示OWNER尚未拆單過), DONE(表示OWNER已經拆單過)\n");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.WithCompId).HasComment("Owner從拆單建立就會帶這個參數,表示從WithCompId的採購單拆單出來的");
            entity.Property(e => e.WithItemId).HasComment("Owner從拆單建立就會帶這個參數,對應對WithCompId的purchase_sub_item.ItemId");
            entity.Property(e => e.WithPurchaseMainId).HasComment("Owner從拆單建立就會帶這個參數,對應對WithCompId的採購單purchase_main_sheet.PurchaseMainId");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("supplier", tb => tb.HasComment("Supplier 這一個表格主要是用來記錄「庫存品項的供應商」，建立此清單後，當使用者在新增庫存品項時就可直接自動下拉選擇。"));

            entity.Property(e => e.Code).HasComment("供應商編號");
            entity.Property(e => e.CompId).HasComment("屬於庫存系統裡面的哪一個組織所有");
            entity.Property(e => e.CompanyPhone).HasComment("供應商公司電話");
            entity.Property(e => e.ContactUser).HasComment("供應商聯絡人");
            entity.Property(e => e.ContactUserPhone).HasComment("供應商聯絡人電話");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("'1'")
                .HasComment("是否激活狀態");
            entity.Property(e => e.Name).HasComment("供應商名稱");
            entity.Property(e => e.Remark).HasComment("備註訊息");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<SupplierTraceLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.AbnormalType).HasComment("RECEIVE_ABNORMAL:收貨異常,\nVERIFY_ABNORMAL:驗收異常,\nQA_ABNORMAL:品管異常,\nOTHER_ABNORMAL:其他異常\n");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.SourceType).HasComment("IN_STOCK(入庫),QA(品質確效),MANUAL(手動登陸)");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<TempInStockItemRecord>(entity =>
        {
            entity.HasKey(e => e.InStockId).HasName("PRIMARY");

            entity.ToTable("temp_in_stock_item_record", tb => tb.HasComment("盤點和調撥單據，如果是要入庫的話，會先寫入一筆資料到這個暫時的表，等到審核通過再複製到 InStockItemRecord."));

            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.ExpirationDate).HasComment("保存期限");
            entity.Property(e => e.InStockQuantity).HasComment("此次入庫數量");
            entity.Property(e => e.InventoryId).HasComment("用來判斷屬於哪一張主單");
            entity.Property(e => e.IsTransfer).HasComment("用來判斷暫存項目是不是已經有複製過去 InStockItemRecord,(0)false: 未複製,(1)true: 已複製");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.OriginalQuantity).HasComment("現有庫存量");
            entity.Property(e => e.ProductId).HasComment("品項PK");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.Type).HasComment("類型\nPURCHASE : 來源是採購\nSHIFT : 調撥\nADJUST : 調整（盤盈）\nRETURN : 退庫");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("執行入庫人員的UserID");
            entity.Property(e => e.UserName).HasComment("執行入庫人員的UserName");
        });

        modelBuilder.Entity<TempOutStockRecord>(entity =>
        {
            entity.HasKey(e => e.OutStockId).HasName("PRIMARY");

            entity.ToTable("temp_out_stock_record", tb => tb.HasComment("盤點和調撥單據，如果是要出庫的話，會先寫入一筆資料到這個暫時的表，等到審核通過再複製到 OutStockRecord."));

            entity.Property(e => e.AbnormalReason).HasComment("異常原因，如果沒有異常則保持空");
            entity.Property(e => e.ApplyQuantity).HasComment("出庫數量");
            entity.Property(e => e.CompId).HasComment("所屬公司ID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.ExpirationDate).HasComment("保存期限");
            entity.Property(e => e.InventoryId).HasComment("用來判斷屬於哪一張主單");
            entity.Property(e => e.IsAbnormal).HasComment("是否為出庫異常\n0為false,1為true");
            entity.Property(e => e.IsTransfer).HasComment("用來判斷暫存項目是不是已經有複製過去 InStockItemRecord,(0)false: 未複製,(1)true: 已複製");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.OriginalQuantity).HasComment("現有庫存量");
            entity.Property(e => e.ProductId).HasComment("品項PK");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.Type).HasComment("類型\nPURCHASE_OUT : 來源是採購\nSHIFT_OUT : 被調撥\nADJUST_OUT : 調整（盤虧）\nRETURN_OUT : 退貨");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UserId).HasComment("執行出庫人員的UserID");
            entity.Property(e => e.UserName).HasComment("執行出庫人員的UserName");
        });

        modelBuilder.Entity<WarehouseAuthlayer>(entity =>
        {
            entity.HasKey(e => e.AuthId).HasName("PRIMARY");

            entity.ToTable("warehouse_authlayer", tb => tb.HasComment("主要是用來設定登入人員的權限。\n一般組之內，設定人員權限時，僅有 3, 5, 7, 9 的 AuthValue 選項。"));

            entity.Property(e => e.AuthDescription).HasComment("權限描述");
            entity.Property(e => e.AuthName).HasComment("權限名稱");
            entity.Property(e => e.AuthValue).HasComment("權限值\n1: 得標廠商\n3: 最高層級\n5: 第一層級\n7: 第二層級\n9: 第三層級");
            entity.Property(e => e.CompId).HasComment("屬於庫存系統裡面的哪一個公司內所有\\\\n對應 -> Company Table\"");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.IsApplyItemManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以申請新增品項");
            entity.Property(e => e.IsGroupManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行群組管理");
            entity.Property(e => e.IsInBoundManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行入庫作業");
            entity.Property(e => e.IsInventoryManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行庫存管理");
            entity.Property(e => e.IsItemManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行品項管理");
            entity.Property(e => e.IsMemberManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行成員管理");
            entity.Property(e => e.IsOutBoundManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行出庫作業");
            entity.Property(e => e.IsRestockManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行盤點");
            entity.Property(e => e.IsVerifyManage)
                .HasDefaultValueSql("'1'")
                .HasComment("是否可以進行抽點");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<WarehouseGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PRIMARY");

            entity.ToTable("warehouse_group", tb => tb.HasComment("主要是用來設定「人員」及「品項」可以分類為哪些組別來使用的，在新增品項和新增人員的時候，都可以從下拉選單中，選擇已建立的組別來加以管理。"));

            entity.Property(e => e.CompId).HasComment("屬於庫存系統裡面的哪一個組織所有");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.GroupDescription).HasComment("群組描述");
            entity.Property(e => e.GroupName).HasComment("群組名稱");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("'1'")
                .HasComment("是否激活狀態");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<WarehouseMember>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity.ToTable("warehouse_member", tb => tb.HasComment("主要是用來設定系統人員登入的相關資料。"));

            entity.Property(e => e.Account).HasDefaultValueSql("'登入帳號'");
            entity.Property(e => e.AuthValue)
                .HasDefaultValueSql("'5'")
                .HasComment("權限值");
            entity.Property(e => e.CompId).HasComment("屬於庫存系統裡面的哪一個組織所有");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.DisplayName).HasComment("顯示名稱");
            entity.Property(e => e.GroupIds).HasComment("屬於數個組別");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Password).HasComment("登入密碼");
            entity.Property(e => e.PhotoUrl).HasComment("大頭貼");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<WarehouseProduct>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("warehouse_product", tb => tb.HasComment("1. 庫存品項基本資料，因為要考慮到調撥這件事情，也就是從醫院單位A把項目移動部分庫存量到醫院單位B；所以，任一相同品項，在不同的醫院單位內的 ProductID 應該是一制，在這條件下，Product 表格的 PK 應是 CompID + ProductID\n2. 目前最大庫存量與最小安庫量跟庫存數量(InStockQuantity)這個欄位去做判斷就好 不要牽扯到TestCount 這樣感覺比較單純 ，TestCount這個欄位僅用來呈現目前尚存TEST用就好\n3. 用無條件進位的方式去轉換成訂購數量\n例如 單位訂購某品項10組 但UnitCoonversion欄位設定為4 則換算結果10/4=2.5 則無條件進位 意即訂購此品項變為3"));

            entity.Property(e => e.CompId).HasComment("品項所屬的組織ID");
            entity.Property(e => e.AllowReceiveDateRange).HasComment("該品項期限距離現在的最小天數");
            entity.Property(e => e.CompName).HasDefaultValueSql("''");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.DeadlineRule).HasComment("有效期限規範");
            entity.Property(e => e.DefaultSupplierId).HasComment("預設供應商");
            entity.Property(e => e.DefaultSupplierName).HasComment("預設供應商名稱");
            entity.Property(e => e.Delievery)
                .HasDefaultValueSql("'VENDOR'")
                .HasComment("VENDOR:廠商直寄,\nOWNER:得標廠商(金萬林)供貨");
            entity.Property(e => e.DeliverFunction).HasDefaultValueSql("''");
            entity.Property(e => e.DeliverRemarks)
                .HasDefaultValueSql("''")
                .HasComment("運送備註");
            entity.Property(e => e.GroupIds)
                .HasDefaultValueSql("''")
                .HasComment("屬於數個組別");
            entity.Property(e => e.GroupNames)
                .HasDefaultValueSql("''")
                .HasComment("組別名稱");
            entity.Property(e => e.InStockQuantity)
                .HasDefaultValueSql("'0'")
                .HasComment("庫存數量");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsNeedAcceptProcess)
                .HasDefaultValueSql("'0'")
                .HasComment("該品項出庫時，是否需要經過二次驗收");
            entity.Property(e => e.LastAbleDate).HasComment("最後可使用日期");
            entity.Property(e => e.LastOutStockDate).HasComment("最後出庫日期");
            entity.Property(e => e.LotNumber).HasComment("批號");
            entity.Property(e => e.LotNumberBatch).HasComment("批次");
            entity.Property(e => e.Manager)
                .HasDefaultValueSql("''")
                .HasComment("管理者");
            entity.Property(e => e.ManufacturerId)
                .HasDefaultValueSql("''")
                .HasComment("品項所屬的製造商ID");
            entity.Property(e => e.ManufacturerName).HasComment("品項所屬的製造商名稱");
            entity.Property(e => e.MaxSafeQuantity).HasComment("最高安庫量");
            entity.Property(e => e.OpenDeadline).HasComment("開封有效期限\n數字（開封後可以用幾天），檢查資料庫是不是int");
            entity.Property(e => e.OpenedSealName)
                .HasDefaultValueSql("''")
                .HasComment("開封列印名稱");
            entity.Property(e => e.OriginalDeadline).HasComment("原始有效期限");
            entity.Property(e => e.PackageWay)
                .HasDefaultValueSql("''")
                .HasComment("包裝方式");
            entity.Property(e => e.PreDeadline).HasComment("已入庫未使用，當前日期在末效日期前幾天通知用");
            entity.Property(e => e.PreOrderDays).HasComment("前置天數");
            entity.Property(e => e.ProductCategory)
                .HasDefaultValueSql("''")
                .HasComment("產品類別\\\\n[耗材, 試劑, 其他]");
            entity.Property(e => e.ProductCode).HasComment("產品編碼");
            entity.Property(e => e.ProductMachine).HasComment("品項所屬儀器");
            entity.Property(e => e.ProductModel)
                .HasDefaultValueSql("''")
                .HasComment("品項型號");
            entity.Property(e => e.ProductName)
                .HasDefaultValueSql("''")
                .HasComment("品項名稱");
            entity.Property(e => e.ProductRemarks)
                .HasDefaultValueSql("''")
                .HasComment("品項備註");
            entity.Property(e => e.ProductSpec)
                .HasDefaultValueSql("''")
                .HasComment("品項規格");
            entity.Property(e => e.QcType)
                .HasDefaultValueSql("'NONE'")
                .HasComment("NONE,LOT_NUMBER,LOT_NUMBER_BATCH");
            entity.Property(e => e.SafeQuantity).HasComment("最小安庫量");
            entity.Property(e => e.SavingFunction).HasDefaultValueSql("''");
            entity.Property(e => e.StockLocation).HasDefaultValueSql("''");
            entity.Property(e => e.SupplierUnit).HasDefaultValueSql("''");
            entity.Property(e => e.SupplierUnitConvertsion).HasDefaultValueSql("'1'");
            entity.Property(e => e.TestCount)
                .HasDefaultValueSql("'1'")
                .HasComment("在總覽表與目前庫存數量(InStockQuantity)相乘顯示給使用者知道目前可用的數量用的欄位");
            entity.Property(e => e.UdibatchCode)
                .HasDefaultValueSql("''")
                .HasComment("UDI 碼");
            entity.Property(e => e.UdicreateCode)
                .HasDefaultValueSql("''")
                .HasComment("UDI 碼");
            entity.Property(e => e.UdiserialCode)
                .HasDefaultValueSql("''")
                .HasComment("UDI 碼");
            entity.Property(e => e.UdiverifyDateCode)
                .HasDefaultValueSql("''")
                .HasComment("UDI 碼");
            entity.Property(e => e.Unit)
                .HasDefaultValueSql("''")
                .HasComment("單位");
            entity.Property(e => e.UnitConversion)
                .HasDefaultValueSql("'1'")
                .HasComment("用來在訂購時將最小單位轉為訂購規格及驗收時 將訂購規格轉為最小單位數量用的欄位");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.Weight)
                .HasDefaultValueSql("''")
                .HasComment("重量");
        });

        modelBuilder.Entity<WarehouseProductCommon>(entity =>
        {
            entity.HasKey(e => e.ProductCode).HasName("PRIMARY");

            entity.ToTable("warehouse_product_common", tb => tb.HasComment("1. 庫存品項基本資料，因為要考慮到調撥這件事情，也就是從醫院單位A把項目移動部分庫存量到醫院單位B；所以，任一相同品項，在不同的醫院單位內的 ProductID 應該是一制，在這條件下，Product 表格的 PK 應是 CompID + ProductID\n2. 目前最大庫存量與最小安庫量跟庫存數量(InStockQuantity)這個欄位去做判斷就好 不要牽扯到TestCount 這樣感覺比較單純 ，TestCount這個欄位僅用來呈現目前尚存TEST用就好\n3. 用無條件進位的方式去轉換成訂購數量\n例如 單位訂購某品項10組 但UnitCoonversion欄位設定為4 則換算結果10/4=2.5 則無條件進位 意即訂購此品項變為3"));

            entity.Property(e => e.ProductCode).HasComment("產品編碼");
            entity.Property(e => e.AllowReceiveDateRange).HasComment("該品項期限距離現在的最小天數");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.DeadlineRule).HasComment("有效期限規範");
            entity.Property(e => e.DefaultSupplierId).HasComment("預設供應商");
            entity.Property(e => e.DefaultSupplierName).HasComment("預設供應商名稱");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsNeedAcceptProcess)
                .HasDefaultValueSql("'0'")
                .HasComment("該品項出庫時，是否需要經過二次驗收");
            entity.Property(e => e.ManufacturerId).HasComment("品項所屬的製造商ID");
            entity.Property(e => e.ManufacturerName).HasComment("品項所屬的製造商名稱");
            entity.Property(e => e.OpenDeadline).HasComment("開封有效期限\n數字（開封後可以用幾天），檢查資料庫是不是int");
            entity.Property(e => e.OpenedSealName).HasComment("開封列印名稱");
            entity.Property(e => e.OriginalDeadline).HasComment("原始有效期限");
            entity.Property(e => e.PackageWay).HasComment("包裝方式");
            entity.Property(e => e.PreOrderDays).HasComment("前置天數");
            entity.Property(e => e.ProductCategory).HasComment("產品類別\n[耗材, 試劑, 其他]");
            entity.Property(e => e.ProductMachine).HasComment("品項所屬儀器");
            entity.Property(e => e.ProductModel).HasComment("品項型號");
            entity.Property(e => e.ProductName).HasComment("品項名稱");
            entity.Property(e => e.ProductRemarks).HasComment("品項備註");
            entity.Property(e => e.ProductSpec).HasComment("品項規格");
            entity.Property(e => e.TestCount)
                .HasDefaultValueSql("'1'")
                .HasComment("在總覽表與目前庫存數量(InStockQuantity)相乘顯示給使用者知道目前可用的數量用的欄位");
            entity.Property(e => e.UdibatchCode).HasComment("UDI 碼");
            entity.Property(e => e.UdicreateCode).HasComment("UDI 碼");
            entity.Property(e => e.UdiserialCode).HasComment("UDI 碼");
            entity.Property(e => e.UdiverifyDateCode).HasComment("UDI 碼");
            entity.Property(e => e.Unit).HasComment("單位");
            entity.Property(e => e.UnitConversion)
                .HasDefaultValueSql("'1'")
                .HasComment("用來在訂購時將最小單位轉為訂購規格及驗收時 將訂購規格轉為最小單位數量用的欄位");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.Weight).HasComment("重量");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}